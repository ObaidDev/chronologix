databaseChangeLog:
  - changeSet:
      id: "1.0.0-2-partition-devices-by-event-time"
      author: obaid
      labels: prod, dev
      changes:
        # Step 0: DO block with proper delimiter handling
        - sql:
            sql: |
              DO $$
              BEGIN
                -- Check if devices table exists and create partitioning logic
                IF EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'devices') THEN
                  -- Add your actual partitioning logic here
                  RAISE NOTICE 'Starting device partitioning process';
                END IF;
              END $$;
            splitStatements: false

        # Remaining steps
        - sql:
            sql: >
              CREATE TABLE devices_partitioned (
                LIKE devices INCLUDING DEFAULTS
              ) PARTITION BY RANGE (event_time);

        - sql:
            sql: >
              CREATE TABLE devices_y2023 PARTITION OF devices_partitioned
                FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');

        - sql:
            sql: >
              CREATE TABLE devices_y2024 PARTITION OF devices_partitioned
                FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');

        - sql:
            sql: >
              CREATE TABLE devices_y2025 PARTITION OF devices_partitioned
                FOR VALUES FROM ('2025-01-01') TO ('2026-01-01');

        - sql:
            sql: >
              CREATE TABLE devices_default PARTITION OF devices_partitioned DEFAULT;

        - sql:
            sql: >
              INSERT INTO devices_partitioned SELECT * FROM devices;

        - sql:
            sql: >
              DROP TABLE devices CASCADE;

        - sql:
            sql: >
              ALTER TABLE devices_partitioned RENAME TO devices;

        - sql:
            sql: >
              ALTER TABLE devices ADD CONSTRAINT devices_pk 
                PRIMARY KEY (source_device_id, id, event_time);

        - sql:
            sql: >
              CREATE INDEX device_device_name_idx ON devices (device_name);

        - sql:
            sql: >
              CREATE INDEX device_source_device_id_idx ON devices (source_device_id);

        - sql:
            sql: >
              CREATE INDEX device_ident_idx ON devices (ident);

        - sql:
            sql: >
              CREATE INDEX device_event_time_idx ON devices (event_time);

        # Create sequence if it doesn't exist and set as default
        - sql:
            sql: |
              DO $
              BEGIN
                -- Check if sequence exists, if not create it
                IF NOT EXISTS (SELECT 1 FROM pg_sequences WHERE sequencename = 'device_id_seq') THEN
                  -- Get the current max ID to start the sequence from the right place
                  EXECUTE 'CREATE SEQUENCE device_id_seq START WITH ' || 
                    COALESCE((SELECT MAX(id) + 1 FROM devices), 1) || 
                    ' INCREMENT BY 1 MINVALUE 1 NO CYCLE CACHE 1';
                END IF;
              END $;
            splitStatements: false

        - sql:
            sql: >
              ALTER TABLE devices ALTER COLUMN id SET DEFAULT nextval('device_id_seq');

      rollback:
        # Rollback with proper DO block handling
        - sql:
            sql: |
              DO $$
              DECLARE
                seq_value bigint;
              BEGIN
                SELECT last_value INTO seq_value FROM device_id_seq;
                DROP SEQUENCE IF EXISTS device_id_seq;
                CREATE SEQUENCE device_id_seq START WITH 99999 INCREMENT BY 100 MINVALUE 1 NO CYCLE CACHE 1;
                PERFORM setval('device_id_seq', seq_value);
              END $$;
            splitStatements: false

        - sql:
            sql: >
              CREATE TABLE devices_non_partitioned (LIKE devices INCLUDING ALL);

        - sql:
            sql: >
              INSERT INTO devices_non_partitioned SELECT * FROM devices;

        - sql:
            sql: >
              DROP TABLE devices CASCADE;

        - sql:
            sql: >
              ALTER TABLE devices_non_partitioned RENAME TO devices;

        - sql:
            sql: >
              ALTER TABLE devices ALTER COLUMN id SET DEFAULT nextval('device_id_seq');